name: Release
on:
  push:
    tags:
      - 'v*'
jobs:
  release:
    name: release
    runs-on: ubuntu-20.04
    steps:
      - name: Validate Release Version
        id: check_version
        run: |
          VERSION=$(echo $GITHUB_REF | sed -ne 's/[^0-9]*\([0-9]\+\.[0-9]\+\.[0-9]\+\(-.*\)\?\).*/\1/p')
          if [ "$VERSION" = "" ]; then
            # Invalid version format
            exit 1
          fi
          if [ $(echo $VERSION | grep "-") ]; then PRERELEASE=true; else PRERELEASE=false; fi
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=prerelease::${PRERELEASE}"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PASSWORD }}
      - name: Export IMAGE_PREFIX
        run: |
          if [ "${{ secrets.IMAGE_PREFIX }}" != "" ]; then IMAGE_PREFIX=${{ secrets.IMAGE_PREFIX }}; else IMAGE_PREFIX=ghcr.io/eivy/; fi
          echo "IMAGE_PREFIX=${IMAGE_PREFIX}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: ${{ steps.check_version.outputs.version }}
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
      - uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest
      - run: make image VERSION=${{ steps.check_version.outputs.version }}
      - run: make tag push IMAGE_TAG=${{ steps.check_version.outputs.version }}
      - run: make image VERSION=${{ steps.check_version.outputs.version }} IMAGE_ARCH=arm64
      - run: make tag push IMAGE_TAG=${{ steps.check_version.outputs.version }} IMAGE_ARCH=arm64
      - name: Push branch tag
        if: ${{ steps.check_version.outputs.prerelease == 'false' }}
        run: |
          BRANCH=$(echo ${{ steps.check_version.outputs.version }} | cut -d "." -f 1-2)
          make tag push IMAGE_TAG=$BRANCH
      - name: Push branch tag arm64
        if: ${{ steps.check_version.outputs.prerelease == 'false' }}
        run: |
          BRANCH=$(echo ${{ steps.check_version.outputs.version }} | cut -d "." -f 1-2)
          make tag push IMAGE_TAG=$BRANCH IMAGE_ARCH=arm64
